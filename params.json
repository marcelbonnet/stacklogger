{
  "name": "Stacklogger",
  "tagline": "An Agnostic and Bootstrap 3 compatible (for default) plugin to log messages in a stack to the user (i.e. using a root DIV element).",
  "body": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\">\r\n<script src=\"https://raw.githubusercontent.com/marcelbonnet/stacklogger/master/src/stacklogger.js\">\r\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\">\r\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css\">\r\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\">\r\n\r\n<script type=\"text/javascript\">\r\n$(document).ready(function(){\r\n    // Override default by passing options to plugin method.\r\n    $(\"#logger\").stackLogger({\r\n        fadeOut : 4000,        //default delay before fade out a message\r\n        //FIXME: need to access constants names :\r\n        neverFadeOut : [ 4 ],  //wait for user input before close ERRor messages\r\n        closeButtonLabel : 'Close and Get me Some Coffe', //custom label for input button (aplies to ERRor messages)\r\n        classes : { warn : 'mywarn' }  //the default classes are Bootstrap 3, but you may apply your own to every LEVEL message\r\n    }).trigger('fade');\r\n\r\n    var $logger = $(\"#logger\").data('stackLogger');//instance\r\n    //example chainning messages:\r\n  \r\n    $logger\r\n    .l(\"Ok message added\", $logger.OK)                 //will apply the default delay\r\n  .l(\"Warning message added\", $logger.WARN, 0)       //Will not fade out this message FIXME: add a button when zero delay or let it be configureable\r\n    .l(\"Another warning message\", $logger.WARN, 6000)  //6 seconds delay\r\n    .l(\"INFO message\", $logger.INFO, 8000)             //8 seconds delay\r\n    .l(\"DEFAULT level message\", $logger.DEFAULT, 5000) //5 seconds delay\r\n    .l(\"ERROR message.\", $logger.ERR, 500);            //ERRor messages always wait for user input (FIXME: default wait. If time is declared, honor it)\r\n  \r\n  //Testing the visual effect with random messages:\r\n  function randLevel(){\r\n    l = Math.abs( parseInt(Math.random() * 10) - 5)\r\n    if(l === 0)\r\n        return randLevel();\r\n    return l;\r\n  }\r\n  \r\n  var tid = setInterval(mycode, 5000);\r\n  function mycode() {\r\n    $logger.l(\"Message added to the stack\", randLevel(), (randLevel()+randLevel())*2000 );\r\n  }\r\n  \r\n});\r\n</script>\r\n\r\n<div id=\"logger\" class=\"\"></div>\r\n\r\n```html\r\n<div id=\"logger\" class=\"\"></div>\r\n```\r\n\r\n```javascript\r\n<script type=\"text/javascript\">\r\n$(document).ready(function(){\r\n    // Override default by passing options to plugin method.\r\n    $(\"#logger\").stackLogger({\r\n        fadeOut : 4000,        //default delay before fade out a message\r\n        //FIXME: need to access constants names :\r\n        neverFadeOut : [ 4 ],  //wait for user input before close ERRor messages\r\n        closeButtonLabel : 'Close and Get me Some Coffe', //custom label for input button (aplies to ERRor messages)\r\n        classes : { warn : 'mywarn' }  //the default classes are Bootstrap 3, but you may apply your own to every LEVEL message\r\n    }).trigger('fade');\r\n\r\n    var $logger = $(\"#logger\").data('stackLogger');//instance\r\n    //example chainning messages:\r\n  \r\n    $logger\r\n    .l(\"Ok message added\", $logger.OK)                 //will apply the default delay\r\n  .l(\"Warning message added\", $logger.WARN, 0)       //Will not fade out this message FIXME: add a button when zero delay or let it be configureable\r\n    .l(\"Another warning message\", $logger.WARN, 6000)  //6 seconds delay\r\n    .l(\"INFO message\", $logger.INFO, 8000)             //8 seconds delay\r\n    .l(\"DEFAULT level message\", $logger.DEFAULT, 5000) //5 seconds delay\r\n    .l(\"ERROR message.\", $logger.ERR, 500);            //ERRor messages always wait for user input (FIXME: default wait. If time is declared, honor it)\r\n  \r\n  //Testing the visual effect with random messages:\r\n  function randLevel(){\r\n    l = Math.abs( parseInt(Math.random() * 10) - 5)\r\n    if(l === 0)\r\n        return randLevel();\r\n    return l;\r\n  }\r\n  \r\n  var tid = setInterval(mycode, 3000);\r\n  function mycode() {\r\n    $logger.l(\"Message added to the stack\", randLevel(), (randLevel()+randLevel())*2000 );\r\n  }\r\n  \r\n});\r\n</script>\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}